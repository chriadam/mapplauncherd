09.03.2010

What is the applauncherd?
==============================

Applauncherd is a daemon and it helps to launch applications faster by 
preloading DUI and Qt dynamically linked libraries and making some 
initializations before loading the application binary and executing the 
main function.

The applauncherd daemon is started by the upstart as part of XSession, that is,
at the same level as the desktop (DUI homescreen). The applauncherd forks the 
will-be-application process a.k.a booster before knowing which application 
is going to be launched next. The booster process does some initializations 
that cannot be shared among other processes and therefore have to be done after 
the fork. This allows, for instance instantiating DUI application before knowing 
the name of the application. Then booster process waits for connection from the
invoker with the information which application should be launched. Each application 
type (e.g. Qt and DUI) has its own booster process. When booster launches the 
application by calling the "main" function, applauncherd will create new booster 
process.

The invoker tells to booster process to load an application binary. Before loading, 
booster process changes its security credentials so that the code in the application 
binary will be executed with the correct credentials. Loading the binary is done with 
dlopen(), and therefore the application needs to be compiled and linked as a shared 
library or a position independent executable. The booster process also sets the
environment variables. Finally, it finds the main function in the
application binary with dlsym() and calls the main() with the command line
arguments given by the invoker.


Using of applauncherd
==============================
1. Binaries intended to be run with applauncherd must be linked as library,
with -shared or -rdynamic flags.

2. Rename appication binary to <application_name>.launch and 
replace original binary by a script that executes invoker with correct 
application type and the name of application binary as a parameter.
Use --type=dui parameter for DUI applications and --type=qt for plain
Qt applications. Launch script example for typical application:

#!/bin/sh
echo "/usr/bin/invoker --type=dui" $0.launch $@
exec /usr/bin/invoker --type=dui $0.launch $@

3. Applauncherd is started by upstart during the boot time, but it
can be also started manually in scratchbox or on the device by 
/usr/bin/applauncherd script

4. Add dependancy to applauncherd package to "Depends" section of applications
debian/control file.


Current known issues
==============================
TBD


Questions and Bug Reports
==============================
TBD
