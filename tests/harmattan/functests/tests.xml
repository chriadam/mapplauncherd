<?xml version="1.0" encoding="ISO-8859-1"?>
<testdefinition version="0.1">

<!-- Test suite, name mandatory - the same as test package name -->
  <!-- Schema: https://projects.maemo.org/docs/testing/xml-definition.html -->
  <suite name="applauncherd-functional-tests" domain="Application framework"> 

    <set name="TC_GLContext" description="functional tests for glcontext" feature="AF Basic Launcher daemon support" requirement="300168">   
      <pre_steps>
          <step>/usr/bin/waitloadavg.rb -l 1.0 -p 1.0 -t 120</step>
          <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
      </pre_steps>

      <case name="applauncherd__test_q_booster_dont_have_GL_context" type="Functional" description="Test that q-booster don't have GL context" timeout="100" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_q_booster_dont_have_GL_context</step>
      </case>

      <case name="applauncherd__test_e_booster_dont_have_GL_context" type="Functional" description="Test that e-booster don't have GL context" timeout="100" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_e_booster_dont_have_GL_context</step>
      </case>

      <case name="applauncherd__test_d_booster_dont_have_GL_context" type="Functional" description="Test that d-booster don't have GL context" timeout="100" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_d_booster_dont_have_GL_context</step>
      </case>

      <case name="applauncherd__test_q_boosted_has_GL_context"
            type="Functional"
            description="Test that q-boosted app has GL context and q-booster doesn't have"
            timeout="100"
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_q_boosted_has_glcontext</step>
      </case>

      <case name="applauncherd__test_d_boosted_has_GL_context"
            type="Functional"
            description="Test that d-boosted app has GL context and d-booster doesn't have"
            timeout="100"
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_d_boosted_has_glcontext</step>
      </case>

      <case name="applauncherd__test_e_boosted_has_GL_context"
            type="Functional"
            description="Test that e-boosted app has GL context and e-booster doesn't have"
            timeout="100"
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_e_boosted_has_glcontext</step>
      </case>

      <post_steps>
          <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>

      <environments>
          <scratchbox>false</scratchbox>
          <hardware>true</hardware>    
      </environments>
    </set>

    <set name="TC_CommonBooster" description="Functional tests for applauncherd boosters" feature="AF Basic Launcher daemon support" requirement="300168">
      <pre_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py stop_daemons</step>
          <step>/usr/bin/waitloadavg.rb -l 1.0 -p 1.0 -t 120</step>
          <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
      </pre_steps>

      <case name="applauncherd__test_unix_signal_handlers" type="Functional" description="Test unixSignalHAndlers by killing booster-m and booster-d, singnal hup" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_unix_signal_handlers</step>
      </case>

      <case name="applauncherd__test_applications_exist" type="Functional" description="test_launchable_application_exists " timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_applications_exist</step>
      </case>

      <case name="applauncherd__test_only_one_applauncherd_exist" type="Functional" description="test_only_one_applauncherd_exist " timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_only_one_applauncherd_exist</step>
      </case>

      <case name="applauncherd__test_restart_booster" type="Functional" description="Test that booster is restarted if it is killed" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_restart_booster</step>
      </case>

      <case name="applauncherd__test_booster_pid_change" type="Functional" description="Test that application pid changes to the booster 'x' when application is launched using booster 'x' " timeout="360" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_booster_pid_change</step>
      </case>

      <case name="applauncherd__test_booster_killed_or_restarted" type="Functional" description="Test that booster is restarted if applauncherd is killed" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_booster_killed_or_restarted</step>
      </case>

      <case name="applauncherd__test_launched_app_name" type="Functional" description="Test that launched application name  have .launch at the end" timeout="460" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launched_app_name</step>
      </case>
      
      <case name="applauncherd__test_launched_app_wm_class_m" type="Functional" description="Test that launched application have correct WM_CLASS Xproperty booster m" timeout="460" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launched_app_wm_class_m</step>
      </case>

      <case name="applauncherd__test_launched_app_wm_class_d" type="Functional" description="Test that launched application have correct WM_CLASS Xproperty booster d" timeout="460" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launched_app_wm_class_d</step>
      </case>

      <case name="applauncherd__test_launched_app_wm_class_e" type="Functional" description="Test that launched application have correct WM_CLASS Xproperty booster e" timeout="460" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launched_app_wm_class_e</step>
      </case>

      <case name="applauncherd__test_launched_app_wm_class_q" type="Functional" description="Test that launched application have correct WM_CLASS Xproperty booster q" timeout="460" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launched_app_wm_class_q</step>
      </case>

      <case name="applauncherd__test_app_exits_clean" type="Functional" description="Test the application exits clean" timeout="360" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-daemons.py test_app_exits_clean</step>
      </case>

      <case name="applauncherd__test_daemon_help" type="Functional" description="Test the --help parameter for the daemon" timeout="360" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-daemons.py test_daemon_help</step>
      </case>

      <case name="applauncherd__test_daemon_no_display" type="Functional" description="Test that daemon cannot be started if the DISPLAY env variable is not set" timeout="360" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-daemons.py test_daemon_no_display</step>
      </case>

      <case name="applauncherd__test_daemon_debug" type="Functional" description="Test the --debug option for the daemon" timeout="360" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-daemons.py test_daemon_debug </step>
      </case>

      <post_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py start_daemons</step>
          <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>

      <environments>
          <scratchbox>false</scratchbox>
          <hardware>true</hardware>    
      </environments>
    </set>

    <set name="TC_MBooster" description="Launcher functional tests" feature="AF Basic Launcher daemon support" requirement="300168">   
      <pre_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py stop_daemons</step>
          <step>/usr/bin/waitloadavg.rb -l 1.0 -p 1.0 -t 120</step>
          <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
      </pre_steps>

      <case name="applauncherd__test_check_applauncherd_sighup_m"
            type="Functional"
            description="Test that SIGHUP: doesn't restart applaucherd, restarts booster-m and doesn't kill other child processes."
            timeout="100"
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_check_applauncherd_sighup_effects_m</step>
      </case>

      <case name="applauncherd__test_wait_term_m" type="Functional" description="Test that the launched application is killed when killing invoker that is waiting for app to terminate" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-invoker.py test_wait_term_m</step>
      </case>

      <case name="applauncherd__test_zombie_state_m" type="Functional" description="To test that no Zombie process exist after the application is killed" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_zombie_state_m</step>
      </case>

      <case name="applauncherd__test_launch_multiple_apps_m" type="Functional" description="To test that more than one applications are launched by the launcher" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user;  DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launch_multiple_apps_m</step>
      </case>

      <case name="applauncherd__test_one_instance_m" type="Functional" description="To test that only one instance of a application exist" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_one_instance_m</step>
      </case>

      <case name="applauncherd__test_fd_booster_m" type="Functional" description="File descriptor test for booster-m" timeout="560" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_fd_booster_m</step>
      </case>

      <case name="applauncherd__test_dirPath_filePath_m"
            type="Functional"
            description="Test that correct file path and dir path is passed by booster m"
            timeout="360"
            level="System">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_dirPath_filePath_m</step>
      </case>

      <case name="applauncherd__test_qttas_load_booster_m" type="Functional" description="To test invoker that qttestability plugin is loaded with -testability argument for booster-m" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_qttas_load_booster_m</step>
      </case>
      <case name="applauncherd__test_qttas_load_env_booster_m" type="Functional" description="To test invoker that qttestability plugin is loaded with QT_LOAD_TESTABILITY env variable for booster-m" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_qttas_load_env_booster_m</step>
      </case>
      <case name="applauncherd__test_signal_status_m" type="Functional" description="Test that SigBlk, SigIgn and SigCgt is same for launched and non launched applications" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_signal_status_m</step>
      </case>
      <case name="applauncherd__test_argv_mbooster_limit" type="Functional" description="Test that ARGV_LIMIT (32) arguments are successfully passed to cached [QM]Application." timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_argv_mbooster_limit</step>
      </case>
      <case name="applauncherd__test_argv_mbooster_over_limit" type="Functional" description="Test that extra arguments than ARGV_LIMIT are ignored" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_argv_mbooster_over_limit</step>
      </case>

      <case name="applauncherd__test_launch_multiple_apps_cont_m" type="Functional" description="Test that launcher can launch multiple applications continously" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launch_multiple_apps_cont_m</step>
      </case>

      <case name="applauncherd__test_detect_booster_m_leaks_file_descriptor" type="Functional" description="Test that booster-m doesn't leak file descriptors when invoker is used by calling application directly not by the d-Bus service" timeout="60" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_detect_booster_m_leaks_file_descriptor_when_invoker_is_using_app_directly</step>
      </case>

      <post_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py start_daemons</step>
          <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>
      <environments>
          <scratchbox>false</scratchbox>
          <hardware>true</hardware>    
      </environments>
    </set>


    <set name="TC_QtBooster" description="Functional tests for applauncherd boosters" feature="AF Basic Launcher daemon support" requirement="300168">
      <pre_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py stop_daemons</step>
          <step>/usr/bin/waitloadavg.rb -l 1.0 -p 1.0 -t 120</step>
          <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
      </pre_steps>

      <case name="applauncherd__test_check_applauncherd_sighup_q"
            type="Functional"
            description="Test that SIGHUP: doesn't restart applaucherd, restarts booster-q and doesn't kill other child processes."
            timeout="100"
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_check_applauncherd_sighup_effects_q</step>
      </case>

      <case name="applauncherd__test_zombie_state_q" type="Functional" description="To test that no Zombie process exist after the application is killed" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_zombie_state_q</step>
      </case>

      <case name="applauncherd__test_fd_booster_q" type="Functional" description="File descriptor test for booster-q" timeout="560" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_fd_booster_q</step>
      </case>

      <case name="applauncherd__test_dirPath_filePath_q" type="Functional" description="Test that correct file path and dir path is passed by booster q" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_dirPath_filePath_q</step>
      </case>

      <case name="applauncherd__test_qttas_load_booster_q" type="Functional" description="To test invoker that qttestability plugin is loaded with -testability argument for booster-q" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_qttas_load_booster_q</step>
      </case>

      <case name="applauncherd__test_detect_booster_q_leaks_file_descriptor" type="Functional" description="Test that booster-q doesn't leak file descriptors when invoker is used by calling application directly not by the d-Bus service" timeout="60" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_detect_booster_q_leaks_file_descriptor_when_invoker_is_using_app_directly</step>
      </case>

      <post_steps>
          <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>

      <environments>
          <scratchbox>false</scratchbox>
          <hardware>true</hardware>    
      </environments>
    </set>


    <set name="TC_DBooster" description="functional tests for qml boosters" feature="AF Basic Launcher daemon support" requirement="300168">   
      <pre_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py stop_daemons</step>
          <step>/usr/bin/waitloadavg.rb -l 1.0 -p 1.0 -t 120</step>
          <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
      </pre_steps>

      <case name="applauncherd__test_check_applauncherd_sighup_d"
            type="Functional"
            description="Test that SIGHUP: doesn't restart applaucherd, restarts booster-d and doesn't kill other child processes."
            timeout="100"
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_check_applauncherd_sighup_effects_d</step>
      </case>

      <case name="applauncherd__test_zombie_state_qml" type="Functional" description="To test that no Zombie process exist after the application is killed" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_zombie_state_qml</step>
      </case>

      <case name="applauncherd__test_launch_multiple_apps_qml" type="Functional" description="To test that more than one applications are launched by the launcher" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launch_multiple_apps_qml</step>
      </case>

      <case name="applauncherd__test_launch_multiple_apps_cont_qml" type="Functional" description="To test that more than one applications are launched by the launcher" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launch_multiple_apps_cont_qml</step>
      </case>

      <case name="applauncherd__test_wait_term_qml" type="Functional" description="When calling invoker with --wait-term and killing invoker,the launched application should die too." timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-invoker.py test_wait_term_qml</step>
      </case>

      <case name="applauncherd__test_fd_booster_d" type="Functional" description="File descriptor test for booster-d" timeout="560" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_fd_booster_d</step>
      </case>

      <case name="applauncherd__test_qttas_load_booster_d" type="Functional" description="To test invoker that qttestability plugin is loaded with -testability argument for booster-d" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_qttas_load_booster_d</step>
      </case>

      <case name="applauncherd__test_qttas_load_env_booster_d" type="Functional" description="To test invoker that qttestability plugin is loaded with QT_LOAD_TESTABILITY env variable for booster-d" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_qttas_load_env_booster_d</step>
      </case>

      <case name="applauncherd__test_signal_status_qml" type="Functional" description="Test that SigBlk, SigIgn and SigCgt is same for launched and non launched applications" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_signal_status_qml</step>
      </case>

      <case name="applauncherd__test_argv_dbooster_limit" type="Functional" description="Test that ARGV_LIMIT (32) arguments are successfully passed to cached [QM]Application." timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_argv_dbooster_limit</step>
      </case>

      <case name="applauncherd__test_argv_dbooster_over_limit" type="Functional" description="Test that extra arguments than ARGV_LIMIT are ignored " timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_argv_dbooster_over_limit </step>
      </case>

      <case name="applauncherd__test_dirPath_filePath_d" type="Functional" description="Test that correct file path and dir path is passed by booster d" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_dirPath_filePath_d</step>
      </case>

      <case name="applauncherd__test_detect_booster_d_leaks_file_descriptor" type="Functional" description="Test that booster-d doesn't leak file descriptors when invoker is used by calling application directly not by the d-Bus service" timeout="60" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_detect_booster_d_leaks_file_descriptor_when_invoker_is_using_app_directly</step>
      </case>

      <post_steps>
	<step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py start_daemons</step>
        <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>

      <environments>
          <scratchbox>false</scratchbox>
          <hardware>true</hardware>    
      </environments>
    </set>


      <!-- Test for e booster -->
    <set name="TC_EBooster" description="functional tests for qml boosters" feature="AF Basic Launcher daemon support" requirement="300168">   
      <pre_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py stop_daemons</step>
          <step>/usr/bin/waitloadavg.rb -l 1.0 -p 1.0 -t 120</step>
          <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
      </pre_steps>

      <case name="applauncherd__test_check_applauncherd_sighup_e"
            type="Functional"
            description="Test that SIGHUP: doesn't restart applaucherd, restarts booster-e and doesn't kill other child processes."
            timeout="100"
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_check_applauncherd_sighup_effects_e</step>
      </case>

      <case name="applauncherd__test_wait_term_e" type="Functional" description="When calling invoker with --wait-term and killing invoker,the launched application should die too." timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-invoker.py test_wait_term_e</step>
      </case>

      <case name="applauncherd__test_zombie_state_e" type="Functional" description="To test that no Zombie process exist after the application is killed" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_zombie_state_e</step>
      </case>

      <case name="applauncherd__test_launch_multiple_apps_e" type="Functional" description="To test that more than one applications are launched by the launcher" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launch_multiple_apps_e</step>
      </case>

      <case name="applauncherd__test_fd_booster_e" type="Functional" description="File descriptor test for booster-d" timeout="560" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_fd_booster_e</step>
      </case>
      <case name="applauncherd__test_dirPath_filePath_e" type="Functional" description="Test that correct file path and dir path is passed by booster e" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_dirPath_filePath_e</step>
      </case>

      <case name="applauncherd__test_launch_multiple_apps_cont_e" type="Functional" description="To test that more than one applications are launched by the launcher" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_launch_multiple_apps_cont_e</step>
      </case>

      <case name="applauncherd__test_detect_booster_e_leaks_file_descriptor" type="Functional" description="Test that booster-e doesn't leak file descriptors when invoker is used by calling application directly not by the d-Bus service" timeout="60" level="System" insignificant="false">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_detect_booster_e_leaks_file_descriptor_when_invoker_is_using_app_directly</step>
      </case>

      <post_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py start_daemons</step>
          <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>
      <environments>
          <scratchbox>false</scratchbox>
          <hardware>true</hardware>    
      </environments>
    </set>


    <set name="TC_Security" description="Tests that have something to do with the security platform" feature="AF Basic Launcher daemon support" requirement="300168">
      <pre_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py stop_daemons</step>
          <step>/usr/bin/waitloadavg.rb -l 1.0 -p 1.0 -t 120</step>
          <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
      </pre_steps>

      <case name="applauncherd__test_no_aegis" type="Functional" description="Check that an application that doesn't have aegis file doesn't get any funny credentials." timeout="360" level="System" insignificant="false" >
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-security.py test_no_aegis</step>
      </case>

      <case name="applauncherd__test_invoker_creds" type="Functional" description="Test that launcher and invoker have correct credentials" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-security.py test_invoker_creds</step>
      </case>

      <case name="applauncherd__test_correct_creds" type="Functional" description="Test that launched applications get correct credentials when they provide Aegis files" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-security.py test_correct_creds</step>
      </case>

      <case name="applauncherd__test_dont_pass_invoker_creds" type="Functional" description="Test that invoker specific creds are not passed on to launched application" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-security.py test_dont_pass_invoker_creds</step>
      </case>

      <post_steps>
          <step>source /tmp/session_bus_address.user; DISPLAY=:0  `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py start_daemons</step>
          <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>
     
      <environments>
        <scratchbox>false</scratchbox>
        <hardware>true</hardware>    
      </environments>
    </set>
   
    <set name="TC_Splash" description="functional tests for splash" feature="AF Basic Launcher daemon support" requirement="300168">   
      <pre_steps>
          <step>/usr/bin/waitloadavg.rb -l 1.0 -p 1.0 -t 120</step>
          <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
      </pre_steps>

      <case name="applauncherd__test_splash" type="Functional" description="To test --splash functionality" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  /usr/share/applauncherd-testscripts/tc_splash.rb --name test_splash</step>
      </case>

      <case name="applauncherd__test_splash_landscape" type="Functional" description="To test --splash-landscape functionality" timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  /usr/share/applauncherd-testscripts/tc_splash.rb --name test_splash_landscape</step>
      </case>

      <case name="applauncherd__test_no_splash" type="Functional" description="To test splash parameters is not reset " timeout="360" level="System" insignificant="false">
          <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0  /usr/share/applauncherd-testscripts/tc_splash.rb --name test_no_splash</step>
      </case>

      <post_steps>
          <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>

      <environments>
          <scratchbox>true</scratchbox>
          <hardware>true</hardware>    
      </environments>
    </set>


    <set name="TC_Stress_test"
         description="functional tests for bugs and new features"
         feature="AF Basic Launcher daemon support"
         requirement="300168">   
        <pre_steps>
            <step>/usr/bin/waitloadavg.rb -l 1.0 -p 1.0 -t 120</step>
            <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
        </pre_steps>

        <case name="applauncherd__test_stress_boosted_apps"
              type="Functional"
              description="Stress test for boosted applications to check only one instance is running."
              timeout="360"
              level="System">
            <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_stress_boosted_apps</step>
        </case>

      <post_steps>
          <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>


        <environments>
            <scratchbox>true</scratchbox>
            <hardware>true</hardware>    
        </environments>
    </set>

    <set name="TC_REEXEC" description="functional tests for security of applaucherd" feature="AF Basic Launcher daemon support">
      <pre_steps>
        <step>initctl stop xsession/pkgm-timed-checks</step>
        <step>rm /var/lib/dpkg/lock</step>
        <step>dpkg --configure -a</step>
        <step>touch /root/.itm</step> <!--Enable test mode for invoker -->
      </pre_steps>

      <case name="applauncherd__test_that_other_apps_dont_gain_new_token_on_update" 
            type="Functional" 
            description="Checks that when running application is upgraded and upgrade contains new token, then this runing application doesn't gain new token until it is restarted (re-exec of applauncherd don't have impact on child processes)." 
            timeout="100" 
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-security.py test_that_other_apps_dont_gain_new_token</step>
      </case>

      <case name="applauncherd__test_reexec_when_new_token_is_installed"
            type="Functional" 
            description="Checks that when new application is installed (facebookqml) containing new security token, then applauncherd gains this new security token" 
            timeout="200" 
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-security.py test_reexec_when_new_token_is_installed</step>
      </case>

      <case name="applauncherd__test_reexec_when_file_in_usrlib_modified" 
            type="Functional" 
            description="Test that reexec is triggered when a package modifies a file in /usr/lib"
            timeout="200"
            level="System">
        <step expected_result="0">source /tmp/session_bus_address.user; DISPLAY=:0 `pyversions -d` /usr/share/applauncherd-testscripts/test-func-launcher.py test_reexec_when_file_in_usrlib_modified</step>
      </case>

      <post_steps>
        <step>initctl start xsession/pkgm-timed-checks</step>
        <step>rm -f /root/.itm</step> <!--Disable test mode for invoker -->
      </post_steps>
      <environments>
          <scratchbox>false</scratchbox>
          <hardware>true</hardware>
      </environments>
    </set>
  </suite>
</testdefinition>
